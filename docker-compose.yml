services:
  db:
    image: postgres:17
    container_name: postgres_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data

    # Checking database readiness
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 30s
      timeout: 5s
      retries: 5

  strapi:
    # Build Strapi from the lms-backend folder
    build:
      context: ./lms-backend
    restart: unless-stopped

    environment:
      # DB
      DATABASE_CLIENT: postgres
      DATABASE_HOST: ${POSTGRES_HOST}
      DATABASE_PORT: ${POSTGRES_PORT}
      DATABASE_NAME: ${POSTGRES_DB}
      DATABASE_USERNAME: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_SSL: ${POSTGRES_SSL}

      # Secrets
      APP_KEYS: ${APP_KEYS}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      JWT_SECRET: ${JWT_SECRET}

      # AWS S3
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_BUCKET_NAME: ${AWS_BUCKET_NAME}
      AWS_URL: ${AWS_URL}

      # Astro container
      FRONTEND_URL: ${FRONTEND_URL}

    # Wait for Postgres to start
    depends_on:
      - db

    # Check Strapi readiness
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:1337/admin" ]  # Check the admin panel
      interval: 30s
      timeout: 5s
      retries: 5


  astro:
    # Build Astro from the frontend folder
    build:
      context: ./lms-frontend
    restart: unless-stopped

    environment:
      HOST: "0.0.0.0"
      PORT: 4321
      HOST_URL: ${ASTRO_HOST_URL}
      API_URL: ${STRAPI_API_URL}
      JWT_SECRET: ${JWT_SECRET}

    # Wait for Strapi to start
    depends_on:
      - strapi

    # Check Astro readiness
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:4321/" ]  # Check the website
      interval: 30s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
    depends_on:
      - astro
      - strapi

volumes:
  postgres_data:
